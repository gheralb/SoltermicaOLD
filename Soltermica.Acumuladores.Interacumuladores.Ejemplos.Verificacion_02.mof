model Soltermica.Acumuladores.Interacumuladores.Ejemplos.Verificacion_02
parameter Real prescribedVolumeFlow_1.medium.rho(unit = "kg/m3", min = 0.0) 
  "density";
parameter Real prescribedVolumeFlow_1.medium.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real prescribedVolumeFlow_1.medium.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real prescribedVolumeFlow_1.medium.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real prescribedVolumeFlow_1.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real prescribedVolumeFlow_1.m(unit = "kg", min = 0.0) = 0.1 
  "mass of medium";
parameter Real prescribedVolumeFlow_1.T0(unit = "K", min = 0.0) = 308.15 
  "initial temperature of medium";
parameter Real prescribedVolumeFlow_1.flowPort_a.medium.rho(unit = "kg/m3", 
  min = 0.0) "density";
parameter Real prescribedVolumeFlow_1.flowPort_a.medium.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real prescribedVolumeFlow_1.flowPort_a.medium.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real prescribedVolumeFlow_1.flowPort_a.medium.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real prescribedVolumeFlow_1.flowPort_a.medium.nue(unit = "m2/s", 
  min = 0.0) "kinematic viscosity";
parameter Real prescribedVolumeFlow_1.flowPort_b.medium.rho(unit = "kg/m3", 
  min = 0.0) "density";
parameter Real prescribedVolumeFlow_1.flowPort_b.medium.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real prescribedVolumeFlow_1.flowPort_b.medium.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real prescribedVolumeFlow_1.flowPort_b.medium.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real prescribedVolumeFlow_1.flowPort_b.medium.nue(unit = "m2/s", 
  min = 0.0) "kinematic viscosity";
parameter Real red.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real red.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real red.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real red.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real red.medium.nue(unit = "m2/s", min = 0.0) "kinematic viscosity";
parameter Real red.flowPort.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real red.flowPort.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real red.flowPort.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real red.flowPort.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real red.flowPort.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real red.p_Ambient(unit = "Pa") = 401300;
parameter Real red.T_Ambient(unit = "K", min = 0.0) = 283.15;
parameter Real caudal_1.k = 0.00055556 "Constant output value";
parameter Real ambiente_b_1.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real ambiente_b_1.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real ambiente_b_1.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real ambiente_b_1.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real ambiente_b_1.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real ambiente_b_1.flowPort.medium.rho(unit = "kg/m3", min = 0.0) 
  "density";
parameter Real ambiente_b_1.flowPort.medium.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real ambiente_b_1.flowPort.medium.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real ambiente_b_1.flowPort.medium.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real ambiente_b_1.flowPort.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real ambiente_b_1.p_Ambient(unit = "Pa") = 101300;
parameter Real ambiente_b_1.T_Ambient(unit = "K", min = 0.0) = 308.15;
parameter Real consumo.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real consumo.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real consumo.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real consumo.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real consumo.medium.nue(unit = "m2/s", min = 0.0) "kinematic viscosity";
parameter Real consumo.flowPort.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real consumo.flowPort.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real consumo.flowPort.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real consumo.flowPort.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real consumo.flowPort.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real consumo.p_Ambient(unit = "Pa") = 101300;
parameter Real consumo.T_Ambient(unit = "K", min = 0.0) = 283.15;
parameter Real ambiente_a_1.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real ambiente_a_1.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real ambiente_a_1.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real ambiente_a_1.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real ambiente_a_1.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real ambiente_a_1.flowPort.medium.rho(unit = "kg/m3", min = 0.0) 
  "density";
parameter Real ambiente_a_1.flowPort.medium.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real ambiente_a_1.flowPort.medium.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real ambiente_a_1.flowPort.medium.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real ambiente_a_1.flowPort.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real TdistTemp.amplitude = 20 "Amplitude of trapezoid";
parameter Real TdistTemp.rising(unit = "s", min = 0.0) = 90 "Rising duration of trapezoid";
parameter Real TdistTemp.width(unit = "s", min = 0.0) = 200 "Width duration of trapezoid";
parameter Real TdistTemp.falling(unit = "s", min = 0.0) = 90 "Falling duration of trapezoid";
parameter Real TdistTemp.period(unit = "s", min = 1E-060) = 400 "Time for one period";
parameter Integer TdistTemp.nperiod = (-1) "Number of periods (< 0 means infinite number of periods)";
parameter Real TdistTemp.offset = 308.15 "Offset of output signal";
parameter Real TdistTemp.startTime(unit = "s") = 10 "Output = offset for time < startTime";
protected 
parameter Real TdistTemp.T_rising(unit = "s") = TdistTemp.rising 
  "End time of rising phase within one period";
parameter Real TdistTemp.T_width(unit = "s") = TdistTemp.T_rising+
  TdistTemp.width "End time of width phase within one period";
parameter Real TdistTemp.T_falling(unit = "s") = TdistTemp.T_width+
  TdistTemp.falling "End time of falling phase within one period";
public 
parameter Real Pconst_1.k = 101300 "Constant output value";
parameter Real interacumulador_1.flowPort_b_1.medium.rho(unit = "kg/m3", min = 
  0.0) "density";
parameter Real interacumulador_1.flowPort_b_1.medium.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real interacumulador_1.flowPort_b_1.medium.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real interacumulador_1.flowPort_b_1.medium.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real interacumulador_1.flowPort_b_1.medium.nue(unit = "m2/s", min = 
  0.0) "kinematic viscosity";
parameter Real interacumulador_1.flowPort_a_1.medium.rho(unit = "kg/m3", min = 
  0.0) "density";
parameter Real interacumulador_1.flowPort_a_1.medium.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real interacumulador_1.flowPort_a_1.medium.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real interacumulador_1.flowPort_a_1.medium.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real interacumulador_1.flowPort_a_1.medium.nue(unit = "m2/s", min = 
  0.0) "kinematic viscosity";
parameter Real interacumulador_1.flowPort_a.medium.rho(unit = "kg/m3", min = 0.0)
   "density";
parameter Real interacumulador_1.flowPort_a.medium.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real interacumulador_1.flowPort_a.medium.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real interacumulador_1.flowPort_a.medium.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real interacumulador_1.flowPort_a.medium.nue(unit = "m2/s", min = 0.0)
   "kinematic viscosity";
parameter Real interacumulador_1.flowPort_b.medium.rho(unit = "kg/m3", min = 0.0)
   "density";
parameter Real interacumulador_1.flowPort_b.medium.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real interacumulador_1.flowPort_b.medium.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real interacumulador_1.flowPort_b.medium.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real interacumulador_1.flowPort_b.medium.nue(unit = "m2/s", min = 0.0)
   "kinematic viscosity";
parameter Real interacumulador_1.medium_int.rho(unit = "kg/m3", min = 0.0) 
  "density";
parameter Real interacumulador_1.medium_int.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real interacumulador_1.medium_int.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real interacumulador_1.medium_int.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real interacumulador_1.medium_int.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real interacumulador_1.medium_dep.rho(unit = "kg/m3", min = 0.0) 
  "density";
parameter Real interacumulador_1.medium_dep.cp(unit = "J/(kg.K)") 
  "specific heat capacity at constant pressure";
parameter Real interacumulador_1.medium_dep.cv(unit = "J/(kg.K)") 
  "specific heat capacity at constant volume";
parameter Real interacumulador_1.medium_dep.lamda(unit = "W/(m.K)") 
  "thermal conductivity";
parameter Real interacumulador_1.medium_dep.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real interacumulador_1.esp.V_dep(unit = "m3");
parameter Real interacumulador_1.esp.V_int(unit = "m3");
parameter Real interacumulador_1.esp.m_flow_int_nom(unit = "kg/s");
parameter Real interacumulador_1.esp.dp_int_nom(unit = "Pa");
parameter Real interacumulador_1.esp.m_flow_dep_nom(unit = "kg/s");
parameter Real interacumulador_1.esp.dp_dep_nom(unit = "Pa");
parameter Real interacumulador_1.esp.A_int(unit = "m2");
parameter Real interacumulador_1.esp.U_int;
parameter Real interacumulador_1.T0(unit = "K", min = 0.0) = 283.15;
parameter Real valve.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real valve.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real valve.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real valve.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real valve.medium.nue(unit = "m2/s", min = 0.0) "kinematic viscosity";
parameter Real valve.m(unit = "kg", min = 0.0) = 0.1 "mass of medium";
parameter Real valve.T0(unit = "K", min = 0.0) = 283.15 "initial temperature of medium";
parameter Real valve.flowPort_a.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real valve.flowPort_a.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real valve.flowPort_a.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real valve.flowPort_a.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real valve.flowPort_a.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real valve.flowPort_b.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real valve.flowPort_b.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real valve.flowPort_b.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real valve.flowPort_b.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real valve.flowPort_b.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Boolean valve.LinearCharacteristic = true "|standard characteristic|type of characteristic";
parameter Real valve.y1(min = 1E-060) = 1 "|standard characteristic|max. valve opening";
parameter Real valve.Kv1(unit = "m3/s", min = 1E-060) = 0.0003 "|standard characteristic|max. flow @ y = y1";
parameter Real valve.kv0(min = 1E-060, max = 1.0) = 1E-010 "|standard characteristic|leakage flow / max.flow @ y = 0";
parameter Real valve.dp0(unit = "Pa") = 10000 "|standard characteristic|standard pressure drop";
parameter Real valve.rho0(unit = "kg/m3", min = 0.0) = 1000 "|standard characteristic|standard medium's density";
parameter Real valve.frictionLoss(min = 0.0, max = 1.0) = 0 "part of friction losses fed to medium";
protected 
constant Real valve.small = 1E-060;
constant Real valve.eps = 1E-015;
public 
parameter Real const.k = 0 "Constant output value";

Real prescribedVolumeFlow_1.dp(unit = "Pa") = prescribedVolumeFlow_1.flowPort_a.p
  -prescribedVolumeFlow_1.flowPort_b.p "pressure drop a->b";
Real prescribedVolumeFlow_1.V_flow(unit = "m3/s") = prescribedVolumeFlow_1.flowPort_a.m_flow
  /prescribedVolumeFlow_1.medium.rho "Volume flow a->b";
Real prescribedVolumeFlow_1.Q_flow(unit = "W") "heat exchange with ambient";
Real prescribedVolumeFlow_1.T(start = prescribedVolumeFlow_1.T0, unit = "K", 
  min = 0.0) "outlet temperature of medium";
Real prescribedVolumeFlow_1.T_a(unit = "K", min = 0.0) = prescribedVolumeFlow_1.flowPort_a.h
  /prescribedVolumeFlow_1.medium.cp "temperature at flowPort_a";
Real prescribedVolumeFlow_1.T_b(unit = "K", min = 0.0) = prescribedVolumeFlow_1.flowPort_b.h
  /prescribedVolumeFlow_1.medium.cp "temperature at flowPort_b";
Real prescribedVolumeFlow_1.dT(unit = "K") = (if noEvent(prescribedVolumeFlow_1.V_flow
   >= 0) then prescribedVolumeFlow_1.T-prescribedVolumeFlow_1.T_a else 
  prescribedVolumeFlow_1.T_b-prescribedVolumeFlow_1.T) "temperature increase of coolant in flow direction";
protected 
Real prescribedVolumeFlow_1.h(unit = "J/kg") = prescribedVolumeFlow_1.medium.cp*
  prescribedVolumeFlow_1.T "medium's specific enthalpy";
Real prescribedVolumeFlow_1.T_q(unit = "K", min = 0.0) = prescribedVolumeFlow_1.T
   "temperature relevant for heat exchange with ambient";
public 
Real prescribedVolumeFlow_1.flowPort_a.p(unit = "Pa");
Real prescribedVolumeFlow_1.flowPort_a.m_flow(unit = "kg/s");
Real prescribedVolumeFlow_1.flowPort_a.h(unit = "J/kg");
Real prescribedVolumeFlow_1.flowPort_a.H_flow(unit = "W");
Real prescribedVolumeFlow_1.flowPort_b.p(unit = "Pa");
Real prescribedVolumeFlow_1.flowPort_b.m_flow(unit = "kg/s");
Real prescribedVolumeFlow_1.flowPort_b.h(unit = "J/kg");
Real prescribedVolumeFlow_1.flowPort_b.H_flow(unit = "W");
Real prescribedVolumeFlow_1.VolumeFlow(unit = "m3/s");
Real red.T(unit = "K", min = 0.0) "outlet temperature of medium";
Real red.T_port(unit = "K", min = 0.0) = red.flowPort.h/red.medium.cp 
  "temperature at flowPort_a";
protected 
Real red.h(unit = "J/kg") = red.medium.cp*red.T;
public 
Real red.flowPort.p(unit = "Pa");
Real red.flowPort.m_flow(unit = "kg/s");
Real red.flowPort.h(unit = "J/kg");
Real red.flowPort.H_flow(unit = "W");
Real caudal_1.y "Connector of Real output signal";
Real ambiente_b_1.T(unit = "K", min = 0.0) "outlet temperature of medium";
Real ambiente_b_1.T_port(unit = "K", min = 0.0) = ambiente_b_1.flowPort.h/
  ambiente_b_1.medium.cp "temperature at flowPort_a";
protected 
Real ambiente_b_1.h(unit = "J/kg") = ambiente_b_1.medium.cp*ambiente_b_1.T;
public 
Real ambiente_b_1.flowPort.p(unit = "Pa");
Real ambiente_b_1.flowPort.m_flow(unit = "kg/s");
Real ambiente_b_1.flowPort.h(unit = "J/kg");
Real ambiente_b_1.flowPort.H_flow(unit = "W");
Real consumo.T(unit = "K", min = 0.0) "outlet temperature of medium";
Real consumo.T_port(unit = "K", min = 0.0) = consumo.flowPort.h/consumo.medium.cp
   "temperature at flowPort_a";
protected 
Real consumo.h(unit = "J/kg") = consumo.medium.cp*consumo.T;
public 
Real consumo.flowPort.p(unit = "Pa");
Real consumo.flowPort.m_flow(unit = "kg/s");
Real consumo.flowPort.h(unit = "J/kg");
Real consumo.flowPort.H_flow(unit = "W");
Real ambiente_a_1.T(unit = "K", min = 0.0) "outlet temperature of medium";
Real ambiente_a_1.T_port(unit = "K", min = 0.0) = ambiente_a_1.flowPort.h/
  ambiente_a_1.medium.cp "temperature at flowPort_a";
protected 
Real ambiente_a_1.h(unit = "J/kg") = ambiente_a_1.medium.cp*ambiente_a_1.T;
public 
Real ambiente_a_1.flowPort.p(unit = "Pa");
Real ambiente_a_1.flowPort.m_flow(unit = "kg/s");
Real ambiente_a_1.flowPort.h(unit = "J/kg");
Real ambiente_a_1.flowPort.H_flow(unit = "W");
Real ambiente_a_1.p_Ambient(unit = "Pa");
Real ambiente_a_1.T_Ambient(unit = "K", min = 0.0);
Real TdistTemp.y "Connector of Real output signal";
protected 
Real TdistTemp.T0(start = TdistTemp.startTime, unit = "s") "Start time of current period";
Integer TdistTemp.counter(start = TdistTemp.nperiod) "Period counter";
Integer TdistTemp.counter2(start = TdistTemp.nperiod);
public 
Real Pconst_1.y "Connector of Real output signal";
Real interacumulador_1.flowPort_b_1.p(unit = "Pa");
Real interacumulador_1.flowPort_b_1.m_flow(unit = "kg/s");
Real interacumulador_1.flowPort_b_1.h(unit = "J/kg");
Real interacumulador_1.flowPort_b_1.H_flow(unit = "W");
Real interacumulador_1.flowPort_a_1.p(unit = "Pa");
Real interacumulador_1.flowPort_a_1.m_flow(unit = "kg/s");
Real interacumulador_1.flowPort_a_1.h(unit = "J/kg");
Real interacumulador_1.flowPort_a_1.H_flow(unit = "W");
Real interacumulador_1.flowPort_a.p(unit = "Pa");
Real interacumulador_1.flowPort_a.m_flow(unit = "kg/s");
Real interacumulador_1.flowPort_a.h(unit = "J/kg");
Real interacumulador_1.flowPort_a.H_flow(unit = "W");
Real interacumulador_1.flowPort_b.p(unit = "Pa");
Real interacumulador_1.flowPort_b.m_flow(unit = "kg/s");
Real interacumulador_1.flowPort_b.h(unit = "J/kg");
Real interacumulador_1.flowPort_b.H_flow(unit = "W");
Real interacumulador_1.H_int(unit = "J");
Real interacumulador_1.H_dep(unit = "J");
Real interacumulador_1.T_in_1(unit = "K", min = 0.0);
Real interacumulador_1.T_out_1(unit = "K", min = 0.0);
Real interacumulador_1.T_int(unit = "K", min = 0.0);
Real interacumulador_1.T_dep(unit = "K", min = 0.0);
Real interacumulador_1.T_in_AF(unit = "K", min = 0.0);
Real interacumulador_1.T_out_ACS(unit = "K", min = 0.0);
Real interacumulador_1.Q_int_1(unit = "W");
Real interacumulador_1.Q_int_dep(unit = "W");
Real interacumulador_1.DeltaT(unit = "K");
Real valve.dp(unit = "Pa") = valve.flowPort_a.p-valve.flowPort_b.p 
  "pressure drop a->b";
Real valve.V_flow(unit = "m3/s") = valve.flowPort_a.m_flow/valve.medium.rho 
  "Volume flow a->b";
Real valve.Q_flow(unit = "W") "heat exchange with ambient";
Real valve.T(start = valve.T0, unit = "K", min = 0.0) "outlet temperature of medium";
Real valve.T_a(unit = "K", min = 0.0) = valve.flowPort_a.h/valve.medium.cp 
  "temperature at flowPort_a";
Real valve.T_b(unit = "K", min = 0.0) = valve.flowPort_b.h/valve.medium.cp 
  "temperature at flowPort_b";
Real valve.dT(unit = "K") = (if noEvent(valve.V_flow >= 0) then valve.T-
  valve.T_a else valve.T_b-valve.T) "temperature increase of coolant in flow direction";
protected 
Real valve.h(unit = "J/kg") = valve.medium.cp*valve.T "medium's specific enthalpy";
Real valve.T_q(unit = "K", min = 0.0) = valve.T "temperature relevant for heat exchange with ambient";
public 
Real valve.flowPort_a.p(unit = "Pa");
Real valve.flowPort_a.m_flow(unit = "kg/s");
Real valve.flowPort_a.h(unit = "J/kg");
Real valve.flowPort_a.H_flow(unit = "W");
Real valve.flowPort_b.p(unit = "Pa");
Real valve.flowPort_b.m_flow(unit = "kg/s");
Real valve.flowPort_b.h(unit = "J/kg");
Real valve.flowPort_b.H_flow(unit = "W");
protected 
Real valve.yLim = max(min(valve.y, valve.y1), 0) "limited valve opening";
Real valve.Kv(unit = "m3/s") "standard flow rate";
public 
Real valve.y;
Real const.y "Connector of Real output signal";

function Modelica.Thermal.FluidHeatFlow.Media.Water
  input Real rho := 995.6 "density";
  input Real cp := 4177 "specific heat capacity at constant pressure";
  input Real cv := 4177 "specific heat capacity at constant volume";
  input Real lamda := 0.615 "thermal conductivity";
  input Real nue := 8E-007 "kinematic viscosity";
  output Modelica.Thermal.FluidHeatFlow.Media.Water _out := Modelica.Thermal.FluidHeatFlow.Media.Water
    (
    rho = rho, 
    cp = cp, 
    cv = cv, 
    lamda = lamda, 
    nue = nue
  );

algorithm 
end Modelica.Thermal.FluidHeatFlow.Media.Water;
function Soltermica.Acumuladores.Interacumuladores.CatalogoEquipos.HEATSUN_ISSWX200
  input Real V_dep := 0.2;
  input Real V_int := 0.01;
  input Real m_flow_int_nom := 0.00055556;
  input Real dp_int_nom := 17800;
  input Real m_flow_dep_nom := 0.00055556;
  input Real dp_dep_nom := 17800;
  input Real A_int := 1;
  input Real U_int := 500;
  output Soltermica.Acumuladores.Interacumuladores.CatalogoEquipos.HEATSUN_ISSWX200 
    _out := Soltermica.Acumuladores.Interacumuladores.CatalogoEquipos.HEATSUN_ISSWX200
    (
    V_dep = V_dep, 
    V_int = V_int, 
    m_flow_int_nom = m_flow_int_nom, 
    dp_int_nom = dp_int_nom, 
    m_flow_dep_nom = m_flow_dep_nom, 
    dp_dep_nom = dp_dep_nom, 
    A_int = A_int, 
    U_int = U_int
  );

algorithm 
end Soltermica.Acumuladores.Interacumuladores.CatalogoEquipos.HEATSUN_ISSWX200;
equation
prescribedVolumeFlow_1.flowPort_a.m_flow+prescribedVolumeFlow_1.flowPort_b.m_flow
   = 0;
if (prescribedVolumeFlow_1.m > 1E-060) then 
  prescribedVolumeFlow_1.flowPort_a.H_flow+prescribedVolumeFlow_1.flowPort_b.H_flow
    +prescribedVolumeFlow_1.Q_flow = prescribedVolumeFlow_1.m*prescribedVolumeFlow_1.medium.cv
    *der(prescribedVolumeFlow_1.T);
else
  prescribedVolumeFlow_1.flowPort_a.H_flow+prescribedVolumeFlow_1.flowPort_b.H_flow
    +prescribedVolumeFlow_1.Q_flow = 0;
end if;
prescribedVolumeFlow_1.flowPort_a.H_flow = semiLinear(prescribedVolumeFlow_1.flowPort_a.m_flow,
   prescribedVolumeFlow_1.flowPort_a.h, prescribedVolumeFlow_1.h);
prescribedVolumeFlow_1.flowPort_b.H_flow = semiLinear(prescribedVolumeFlow_1.flowPort_b.m_flow,
   prescribedVolumeFlow_1.flowPort_b.h, prescribedVolumeFlow_1.h);
prescribedVolumeFlow_1.Q_flow = 0;
prescribedVolumeFlow_1.V_flow = prescribedVolumeFlow_1.VolumeFlow;
red.flowPort.H_flow = semiLinear(red.flowPort.m_flow, red.flowPort.h, red.h);
red.flowPort.p = red.p_Ambient;
red.T = red.T_Ambient;
caudal_1.y = caudal_1.k;
ambiente_b_1.flowPort.H_flow = semiLinear(ambiente_b_1.flowPort.m_flow, 
  ambiente_b_1.flowPort.h, ambiente_b_1.h);
ambiente_b_1.flowPort.p = ambiente_b_1.p_Ambient;
ambiente_b_1.T = ambiente_b_1.T_Ambient;
consumo.flowPort.H_flow = semiLinear(consumo.flowPort.m_flow, consumo.flowPort.h,
   consumo.h);
consumo.flowPort.p = consumo.p_Ambient;
consumo.T = consumo.T_Ambient;
ambiente_a_1.flowPort.H_flow = semiLinear(ambiente_a_1.flowPort.m_flow, 
  ambiente_a_1.flowPort.h, ambiente_a_1.h);
ambiente_a_1.flowPort.p = ambiente_a_1.p_Ambient;
ambiente_a_1.T = ambiente_a_1.T_Ambient;
when pre(TdistTemp.counter2) <> 0 and sample(TdistTemp.startTime, 
  TdistTemp.period) then
  TdistTemp.T0 = time;
  TdistTemp.counter2 = pre(TdistTemp.counter);
  TdistTemp.counter = pre(TdistTemp.counter)-(if pre(TdistTemp.counter) > 0
     then 1 else 0);
end when;
TdistTemp.y = TdistTemp.offset+(if time < TdistTemp.startTime or 
  TdistTemp.counter2 == 0 or time >= TdistTemp.T0+TdistTemp.T_falling then 0
   else (if time < TdistTemp.T0+TdistTemp.T_rising then (time-TdistTemp.T0)*
  TdistTemp.amplitude/TdistTemp.T_rising else (if time < TdistTemp.T0+
  TdistTemp.T_width then TdistTemp.amplitude else (TdistTemp.T0+TdistTemp.T_falling
  -time)*TdistTemp.amplitude/(TdistTemp.T_falling-TdistTemp.T_width))));
Pconst_1.y = Pconst_1.k;
interacumulador_1.T_in_1 = interacumulador_1.flowPort_a_1.h/interacumulador_1.medium_int.cp;
interacumulador_1.T_out_1 = interacumulador_1.T_int;
interacumulador_1.T_in_AF = interacumulador_1.flowPort_a.h/interacumulador_1.medium_dep.cp;
interacumulador_1.T_out_ACS = interacumulador_1.T_dep;
interacumulador_1.H_int = interacumulador_1.esp.V_int*interacumulador_1.medium_int.rho
  *interacumulador_1.medium_int.cp*interacumulador_1.T_int;
interacumulador_1.H_dep = interacumulador_1.esp.V_dep*interacumulador_1.medium_dep.rho
  *interacumulador_1.medium_dep.cp*interacumulador_1.T_dep;
interacumulador_1.flowPort_a_1.H_flow = interacumulador_1.flowPort_a_1.m_flow*
  interacumulador_1.medium_int.cp*interacumulador_1.T_in_1;
interacumulador_1.flowPort_b_1.H_flow = interacumulador_1.flowPort_b_1.m_flow*
  interacumulador_1.medium_int.cp*interacumulador_1.T_out_1;
interacumulador_1.flowPort_a.H_flow = interacumulador_1.flowPort_a.m_flow*
  interacumulador_1.medium_dep.cp*interacumulador_1.T_in_AF;
interacumulador_1.flowPort_b.H_flow = interacumulador_1.flowPort_b.m_flow*
  interacumulador_1.medium_dep.cp*interacumulador_1.T_out_ACS;
interacumulador_1.flowPort_a_1.p-interacumulador_1.flowPort_b_1.p =  -
  interacumulador_1.esp.dp_int_nom*interacumulador_1.flowPort_a_1.m_flow^2/
  interacumulador_1.esp.m_flow_int_nom^2;
interacumulador_1.flowPort_a.p-interacumulador_1.flowPort_b.p =  -
  interacumulador_1.esp.dp_dep_nom*interacumulador_1.flowPort_a.m_flow^2/
  interacumulador_1.esp.m_flow_dep_nom^2;
interacumulador_1.flowPort_a_1.m_flow+interacumulador_1.flowPort_b_1.m_flow = 0;
interacumulador_1.flowPort_a.m_flow+interacumulador_1.flowPort_b.m_flow = 0;
interacumulador_1.flowPort_a_1.H_flow+interacumulador_1.flowPort_b_1.H_flow+
  interacumulador_1.Q_int_1 = der(interacumulador_1.H_int);
interacumulador_1.flowPort_a.H_flow+interacumulador_1.flowPort_b.H_flow+
  interacumulador_1.Q_int_dep = der(interacumulador_1.H_dep);
interacumulador_1.Q_int_1+interacumulador_1.Q_int_dep = 0;
interacumulador_1.DeltaT = 0.5*(interacumulador_1.T_in_1+interacumulador_1.T_int)
  -interacumulador_1.T_dep;
interacumulador_1.Q_int_dep = interacumulador_1.esp.U_int*interacumulador_1.esp.A_int
  *interacumulador_1.DeltaT;
valve.flowPort_a.m_flow+valve.flowPort_b.m_flow = 0;
if (valve.m > 1E-060) then 
  valve.flowPort_a.H_flow+valve.flowPort_b.H_flow+valve.Q_flow = valve.m*
    valve.medium.cv*der(valve.T);
else
  valve.flowPort_a.H_flow+valve.flowPort_b.H_flow+valve.Q_flow = 0;
end if;
valve.flowPort_a.H_flow = semiLinear(valve.flowPort_a.m_flow, valve.flowPort_a.h,
   valve.h);
valve.flowPort_b.H_flow = semiLinear(valve.flowPort_b.m_flow, valve.flowPort_b.h,
   valve.h);
valve.Kv/valve.Kv1 = (if valve.LinearCharacteristic then valve.kv0+(1-valve.kv0)
  *valve.yLim/valve.y1 else valve.kv0*exp(ln(1/valve.kv0)*valve.yLim/valve.y1));
valve.dp/valve.dp0 = valve.medium.rho*valve.V_flow*abs(valve.V_flow/valve.Kv)/
  valve.rho0/valve.Kv;
valve.Q_flow = valve.frictionLoss*valve.V_flow*valve.dp;
const.y = const.k;
ambiente_a_1.p_Ambient = Pconst_1.y;
ambiente_a_1.T_Ambient = TdistTemp.y;
ambiente_a_1.flowPort.H_flow+prescribedVolumeFlow_1.flowPort_a.H_flow = 0;
prescribedVolumeFlow_1.flowPort_a.h = ambiente_a_1.flowPort.h;
ambiente_a_1.flowPort.m_flow+prescribedVolumeFlow_1.flowPort_a.m_flow = 0;
assert(abs(prescribedVolumeFlow_1.flowPort_a.medium.cp-ambiente_a_1.flowPort.medium.cp)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(prescribedVolumeFlow_1.flowPort_a.medium.cv-ambiente_a_1.flowPort.medium.cv)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(prescribedVolumeFlow_1.flowPort_a.medium.lamda-ambiente_a_1.flowPort.medium.lamda)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(prescribedVolumeFlow_1.flowPort_a.medium.nue-ambiente_a_1.flowPort.medium.nue)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(prescribedVolumeFlow_1.flowPort_a.medium.rho-ambiente_a_1.flowPort.medium.rho)
   <= 0, "Parameters in connected connectors must be equal");
prescribedVolumeFlow_1.flowPort_a.p = ambiente_a_1.flowPort.p;
ambiente_b_1.flowPort.H_flow+interacumulador_1.flowPort_b_1.H_flow = 0;
interacumulador_1.flowPort_b_1.h = ambiente_b_1.flowPort.h;
ambiente_b_1.flowPort.m_flow+interacumulador_1.flowPort_b_1.m_flow = 0;
assert(abs(interacumulador_1.flowPort_b_1.medium.cp-ambiente_b_1.flowPort.medium.cp)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(interacumulador_1.flowPort_b_1.medium.cv-ambiente_b_1.flowPort.medium.cv)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(interacumulador_1.flowPort_b_1.medium.lamda-ambiente_b_1.flowPort.medium.lamda)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(interacumulador_1.flowPort_b_1.medium.nue-ambiente_b_1.flowPort.medium.nue)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(interacumulador_1.flowPort_b_1.medium.rho-ambiente_b_1.flowPort.medium.rho)
   <= 0, "Parameters in connected connectors must be equal");
interacumulador_1.flowPort_b_1.p = ambiente_b_1.flowPort.p;
prescribedVolumeFlow_1.VolumeFlow = caudal_1.y;
valve.y = const.y;
consumo.flowPort.H_flow+valve.flowPort_b.H_flow = 0;
valve.flowPort_b.h = consumo.flowPort.h;
consumo.flowPort.m_flow+valve.flowPort_b.m_flow = 0;
assert(abs(valve.flowPort_b.medium.cp-consumo.flowPort.medium.cp) <= 0, 
  "Parameters in connected connectors must be equal");
assert(abs(valve.flowPort_b.medium.cv-consumo.flowPort.medium.cv) <= 0, 
  "Parameters in connected connectors must be equal");
assert(abs(valve.flowPort_b.medium.lamda-consumo.flowPort.medium.lamda) <= 0, 
  "Parameters in connected connectors must be equal");
assert(abs(valve.flowPort_b.medium.nue-consumo.flowPort.medium.nue) <= 0, 
  "Parameters in connected connectors must be equal");
assert(abs(valve.flowPort_b.medium.rho-consumo.flowPort.medium.rho) <= 0, 
  "Parameters in connected connectors must be equal");
valve.flowPort_b.p = consumo.flowPort.p;
interacumulador_1.flowPort_a.H_flow+red.flowPort.H_flow = 0;
red.flowPort.h = interacumulador_1.flowPort_a.h;
interacumulador_1.flowPort_a.m_flow+red.flowPort.m_flow = 0;
assert(abs(red.flowPort.medium.cp-interacumulador_1.flowPort_a.medium.cp) <= 0, 
  "Parameters in connected connectors must be equal");
assert(abs(red.flowPort.medium.cv-interacumulador_1.flowPort_a.medium.cv) <= 0, 
  "Parameters in connected connectors must be equal");
assert(abs(red.flowPort.medium.lamda-interacumulador_1.flowPort_a.medium.lamda)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(red.flowPort.medium.nue-interacumulador_1.flowPort_a.medium.nue) <= 0,
   "Parameters in connected connectors must be equal");
assert(abs(red.flowPort.medium.rho-interacumulador_1.flowPort_a.medium.rho) <= 0,
   "Parameters in connected connectors must be equal");
red.flowPort.p = interacumulador_1.flowPort_a.p;
interacumulador_1.flowPort_a_1.H_flow+prescribedVolumeFlow_1.flowPort_b.H_flow
   = 0;
prescribedVolumeFlow_1.flowPort_b.h = interacumulador_1.flowPort_a_1.h;
interacumulador_1.flowPort_a_1.m_flow+prescribedVolumeFlow_1.flowPort_b.m_flow
   = 0;
assert(abs(prescribedVolumeFlow_1.flowPort_b.medium.cp-interacumulador_1.flowPort_a_1.medium.cp)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(prescribedVolumeFlow_1.flowPort_b.medium.cv-interacumulador_1.flowPort_a_1.medium.cv)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(prescribedVolumeFlow_1.flowPort_b.medium.lamda-interacumulador_1.flowPort_a_1.medium.lamda)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(prescribedVolumeFlow_1.flowPort_b.medium.nue-interacumulador_1.flowPort_a_1.medium.nue)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(prescribedVolumeFlow_1.flowPort_b.medium.rho-interacumulador_1.flowPort_a_1.medium.rho)
   <= 0, "Parameters in connected connectors must be equal");
prescribedVolumeFlow_1.flowPort_b.p = interacumulador_1.flowPort_a_1.p;
interacumulador_1.flowPort_b.H_flow+valve.flowPort_a.H_flow = 0;
valve.flowPort_a.h = interacumulador_1.flowPort_b.h;
interacumulador_1.flowPort_b.m_flow+valve.flowPort_a.m_flow = 0;
assert(abs(valve.flowPort_a.medium.cp-interacumulador_1.flowPort_b.medium.cp)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(valve.flowPort_a.medium.cv-interacumulador_1.flowPort_b.medium.cv)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(valve.flowPort_a.medium.lamda-interacumulador_1.flowPort_b.medium.lamda)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(valve.flowPort_a.medium.nue-interacumulador_1.flowPort_b.medium.nue)
   <= 0, "Parameters in connected connectors must be equal");
assert(abs(valve.flowPort_a.medium.rho-interacumulador_1.flowPort_b.medium.rho)
   <= 0, "Parameters in connected connectors must be equal");
valve.flowPort_a.p = interacumulador_1.flowPort_b.p;

initial equation
  interacumulador_1.H_int = interacumulador_1.esp.V_int*interacumulador_1.medium_int.rho
    *interacumulador_1.medium_int.cp*interacumulador_1.T0;
  interacumulador_1.H_dep = interacumulador_1.esp.V_dep*interacumulador_1.medium_dep.rho
    *interacumulador_1.medium_dep.cp*interacumulador_1.T0;
  interacumulador_1.T_in_AF = interacumulador_1.T_dep;
initial algorithm
  assert(valve.y1 > valve.small, "Valve characteristic: y1 has to be > 0 !");
  assert(valve.Kv1 > valve.small, "Valve characteristic: Kv1 has to be > 0 !");
  assert(valve.kv0 > valve.small, "Valve characteristic: kv0 has to be > 0 !");
  assert(valve.kv0 < 1-valve.eps, "Valve characteristic: kv0 has to be < 1 !");

end Soltermica.Acumuladores.Interacumuladores.Ejemplos.Verificacion_02;
DAE having 102 scalar unknowns and 102 scalar equations.
Error: The initial conditions for variables of type Real
are overspecified.
There are 1 too many scalar conditions.
To correct it you can
remove Initial equations: 
  equation
  interacumulador_1.T_in_AF = interacumulador_1.T_dep;
  interacumulador_1.H_dep = interacumulador_1.esp.V_dep*interacumulador_1.medium_dep.rho
    *interacumulador_1.medium_dep.cp*interacumulador_1.T0;
