model Soltermica.Acumuladores.Interacumuladores.InteracumuladorSerpentin
parameter Real flowPort_a_dep.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real flowPort_a_dep.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real flowPort_a_dep.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real flowPort_a_dep.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real flowPort_a_dep.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real flowPort_b_dep.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real flowPort_b_dep.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real flowPort_b_dep.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real flowPort_b_dep.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real flowPort_b_dep.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real medium_int.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real medium_int.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real medium_int.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real medium_int.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real medium_int.nue(unit = "m2/s", min = 0.0) "kinematic viscosity";
parameter Real medium_dep.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real medium_dep.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real medium_dep.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real medium_dep.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real medium_dep.nue(unit = "m2/s", min = 0.0) "kinematic viscosity";
parameter Real esp.V_dep(unit = "m3");
parameter Real esp.V_int(unit = "m3");
parameter Real esp.m_flow_int_nom(unit = "kg/s");
parameter Real esp.dp_int_nom(unit = "Pa");
parameter Real esp.m_flow_dep_nom(unit = "kg/s");
parameter Real esp.dp_dep_nom(unit = "Pa");
parameter Real esp.A_int(unit = "m2");
parameter Real esp.U_int;
parameter Real T0(unit = "K", min = 0.0);
parameter Real flowPort_a_int.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real flowPort_a_int.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real flowPort_a_int.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real flowPort_a_int.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real flowPort_a_int.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";
parameter Real flowPort_b_int.medium.rho(unit = "kg/m3", min = 0.0) "density";
parameter Real flowPort_b_int.medium.cp(unit = "J/(kg.K)") "specific heat capacity at constant pressure";
parameter Real flowPort_b_int.medium.cv(unit = "J/(kg.K)") "specific heat capacity at constant volume";
parameter Real flowPort_b_int.medium.lamda(unit = "W/(m.K)") "thermal conductivity";
parameter Real flowPort_b_int.medium.nue(unit = "m2/s", min = 0.0) 
  "kinematic viscosity";

Real flowPort_a_dep.p(unit = "Pa");
Real flowPort_a_dep.m_flow(unit = "kg/s");
Real flowPort_a_dep.h(unit = "J/kg");
Real flowPort_a_dep.H_flow(unit = "W");
Real flowPort_b_dep.p(unit = "Pa");
Real flowPort_b_dep.m_flow(unit = "kg/s");
Real flowPort_b_dep.h(unit = "J/kg");
Real flowPort_b_dep.H_flow(unit = "W");
Real H_dep(unit = "J");
Real T_dep(unit = "K", min = 0.0);
Real T_in_AF(unit = "K", min = 0.0);
Real T_out_ACS(unit = "K", min = 0.0);
Real Q_int_dep(unit = "W");
Real H_int(unit = "J");
Real T_int(unit = "K", min = 0.0);
Real T_in_int(unit = "K", min = 0.0);
Real T_out_int(unit = "K", min = 0.0);
Real Q_int_int(unit = "W");
Real DeltaT(unit = "K");
Real flowPort_a_int.p(unit = "Pa");
Real flowPort_a_int.m_flow(unit = "kg/s");
Real flowPort_a_int.h(unit = "J/kg");
Real flowPort_a_int.H_flow(unit = "W");
Real flowPort_b_int.p(unit = "Pa");
Real flowPort_b_int.m_flow(unit = "kg/s");
Real flowPort_b_int.h(unit = "J/kg");
Real flowPort_b_int.H_flow(unit = "W");

function Modelica.Thermal.FluidHeatFlow.Media.Medium
  input Real rho := 1 "density";
  input Real cp := 1 "specific heat capacity at constant pressure";
  input Real cv := 1 "specific heat capacity at constant volume";
  input Real lamda := 1 "thermal conductivity";
  input Real nue := 1 "kinematic viscosity";
  output Modelica.Thermal.FluidHeatFlow.Media.Medium _out := Modelica.Thermal.FluidHeatFlow.Media.Medium
    (
    rho = rho, 
    cp = cp, 
    cv = cv, 
    lamda = lamda, 
    nue = nue
  );

algorithm 
end Modelica.Thermal.FluidHeatFlow.Media.Medium;
function Soltermica.Acumuladores.Interacumuladores.Especificaciones
  input Real V_dep := 1;
  input Real V_int := 1;
  input Real m_flow_int_nom := 1;
  input Real dp_int_nom := 1;
  input Real m_flow_dep_nom := 1;
  input Real dp_dep_nom := 1;
  input Real A_int := 1;
  input Real U_int := 1;
  output Soltermica.Acumuladores.Interacumuladores.Especificaciones _out := 
    Soltermica.Acumuladores.Interacumuladores.Especificaciones(
    V_dep = V_dep, 
    V_int = V_int, 
    m_flow_int_nom = m_flow_int_nom, 
    dp_int_nom = dp_int_nom, 
    m_flow_dep_nom = m_flow_dep_nom, 
    dp_dep_nom = dp_dep_nom, 
    A_int = A_int, 
    U_int = U_int
  );

algorithm 
end Soltermica.Acumuladores.Interacumuladores.Especificaciones;
equation
T_in_AF = (if noEvent(flowPort_a_dep.m_flow > 0) then flowPort_a_dep.h/
  medium_dep.cp else T_dep);
T_out_ACS = T_dep;
T_in_int = (if noEvent(flowPort_a_int.m_flow > 0) then flowPort_a_int.h/
  medium_int.cp else T_int);
T_out_int = T_int;
flowPort_a_dep.p-flowPort_b_dep.p =  -esp.dp_dep_nom*flowPort_a_dep.m_flow^2/
  esp.m_flow_dep_nom^2;
flowPort_a_int.p-flowPort_b_int.p =  -esp.dp_dep_nom*flowPort_a_int.m_flow^2/
  esp.m_flow_dep_nom^2;
flowPort_a_dep.m_flow+flowPort_b_dep.m_flow = 0;
flowPort_a_int.m_flow+flowPort_b_int.m_flow = 0;
flowPort_a_dep.H_flow+flowPort_b_dep.H_flow+Q_int_dep = esp.V_dep*medium_dep.rho
  *medium_dep.cp*der(T_dep);
flowPort_a_int.H_flow+flowPort_b_int.H_flow+Q_int_int = esp.V_int*medium_int.rho
  *medium_int.cp*der(T_int);
Q_int_dep+Q_int_int = 0;
H_dep = esp.V_dep*medium_dep.rho*medium_dep.cp*T_dep;
H_int = esp.V_int*medium_int.rho*medium_int.cp*T_int;
flowPort_a_dep.H_flow = (if noEvent(flowPort_a_dep.m_flow > 0) then 
  flowPort_a_dep.m_flow*medium_dep.cp*T_in_AF else 0);
flowPort_b_dep.H_flow = (if noEvent(flowPort_b_dep.m_flow < 0) then 
  flowPort_b_dep.m_flow*medium_dep.cp*T_out_ACS else 0);
flowPort_a_int.H_flow = (if noEvent(flowPort_a_int.m_flow > 0) then 
  flowPort_a_int.m_flow*medium_int.cp*T_in_int else 0);
flowPort_b_int.H_flow = (if noEvent(flowPort_b_int.m_flow < 0) then 
  flowPort_b_int.m_flow*medium_int.cp*T_out_int else 0);
DeltaT = 0.5*(T_in_int+T_int)-T_dep;
Q_int_dep = esp.U_int*esp.A_int*DeltaT;

initial equation
  T_int = T0;
  T_in_int = T_int;
  T_dep = T0;
  T_in_AF = T_dep;

end Soltermica.Acumuladores.Interacumuladores.InteracumuladorSerpentin;
DAE having 19 scalar unknowns and 19 scalar equations.
